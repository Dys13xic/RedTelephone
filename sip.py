# The user agent client (UAC) sends SIP requests. The user agent server (UAS) receives requests and returns a SIP response. Unlike other network protocols that
# fix the roles of client and server, e.g., in HTTP, in which a web browser only acts as a client, and never as a server, 
# SIP requires both peers to implement both roles


import socket
import time
import random
import hashlib

LOCAL_IP, LOCAL_PORT = "192.168.2.12", 5060
REMOTE_IP, REMOTE_PORT = "192.168.2.20", 5060

method = "INVITE"
requestLine = "{} sip:{}:{} SIP/2.0\r\n".format(method, REMOTE_IP, REMOTE_PORT)

# TODO generate fromTag
fromTag = ""

# toTag generated by response
toTag = "" 

callID = hex(time.time_ns())[2:] + hex(int(random.getrandbits(32)))[2:] + "@cleckie.com"

sequence = 1

headers = {
    "Via": "SIP/2.0/UDP {}:{}".format(LOCAL_IP, LOCAL_PORT),
    "From": "<sip:IPCall@{}:{}>;tag={}".format(LOCAL_IP, LOCAL_PORT, fromTag),
    "To": "<sip:{}:{}>".format(REMOTE_IP, REMOTE_PORT),
    "Call-ID": "{}".format(callID),
    "CSeq": "{} {}".format(sequence, method),
    "Max-Forwards": "70"
}

# TODO include Request-URI of the request received (before translation) in hash
branch = "z9hG4bK" + hashlib.md5((toTag + fromTag + headers["Call-ID"] + headers["Via"] + str(sequence)).encode()).hexdigest()

# Add branch
headers["Via"] = headers["Via"] + ";branch=" + branch


request = requestLine

for key in headers.keys():
    request += key + ": " + headers[key] + "\r\n"

#print(request)

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

sock.sendto(bytes(request + "\n", "utf-8"), (REMOTE_IP, REMOTE_PORT))
received = str(sock.recv(1024), "utf-8")

print("Received: {}".format(received))